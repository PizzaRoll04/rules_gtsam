name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
  schedule:
  - cron: '00 23 * * *'

jobs:
  test-rules-gtsam:
    continue-on-error: false
    strategy:
      matrix:
        build-config: [gcc, clang]
        os: [ubuntu-22.04, ubuntu-24.04]
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    # env:
    #   cache_secret_file: cache_auth.json
    #   cache_url: ${{ matrix.os == 'ubuntu-22.04' && 'https://storage.googleapis.com/robot-research-bazel-cache' || 'https://storage.googleapis.com/robot-research-noble-bazel-cache' }}
    #   cache_auth: ${{ secrets.BAZEL_CACHE_BASE64 }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      # - name: Fetch Secrets
      #   run: |
      #     echo ${{ env.cache_auth }} | base64 --decode > ${{ runner.temp }}/${{ env.cache_secret_file }}

      # - name: Delete huge unnecessary tools folder
      #   run: rm -rf /opt/hostedtoolcache

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checking out  ${{ github.sha }}
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up Bazel
        uses: philwo/setup-bazel@v1
        with:
          version: 6.0.0  # Specify the Bazel version you want

      - name: Set Commit SHA
        # Store the commit SHA that triggered the job in an environment variable
        run: echo "COMMIT_SHA=${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Create test WORKSPACE
        run: |
          mkdir test_workspace
          cd test_workspace
          echo 'workspace(name = "test_gtsam_workspace")' > WORKSPACE
          echo "
          load(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")

          # Add your rules_gtsam repository as an http_archive with the current commit hash
          http_archive(
              name = \"rules_gtsam\",
              urls = [\"https://github.com/pizzaroll04/rules_gtsam/archive/${COMMIT_SHA}.zip\"],
              strip_prefix = \"rules_gtsam-${COMMIT_SHA}\",
          )
          load(\"@rules_gtsam//bzl:repositories.bzl\", \"gtsam_repositories\")
          gtsam_repositories()          
          load(\"@rules_gtsam//bzl:init_deps.bzl\", \"gtsam_init_deps\")
          gtsam_init_deps()

          # Load Google Test
          http_archive(
              name = \"com_google_googletest\",
              urls = [\"https://github.com/google/googletest/archive/release-1.11.0.zip\"],
              strip_prefix = \"googletest-release-1.11.0\",
          )
          " >> WORKSPACE

      - name: Create BUILD file for testing
        run: |
          cd test_workspace
          echo '
          load("@rules_gtsam//bzl:gtsam.bzl", "gtsam_config")
          load("@rules_gtsam//bzl:gtsam.bzl", "gtsam_dllexport")
          gtsam_config()
          gtsam_dllexport(library_name="gtsam")
          gtsam_dllexport(library_name="gtsam_unstable")

          cc_test(
              name = "test_gtsam",
              srcs = ["test.cpp"],
              deps = [
                  "@gtsam//:gtsam",
                  "@com_google_googletest//:gtest",
                  "@com_google_googletest//:gtest_main",
              ],
          )
          ' > BUILD

      - name: Add Test File
        run: |
          echo '
          #include <gtsam/geometry/Point3.h>
          #include <gtest/gtest.h>

          TEST(GtsamTest, Point3Coordinates) {
              gtsam::Point3 point(1.0, 2.0, 3.0);
              EXPECT_EQ(point.x(), 1.0);
              EXPECT_EQ(point.y(), 2.0);
              EXPECT_EQ(point.z(), 3.0);
          }

          int main(int argc, char **argv) {
              ::testing::InitGoogleTest(&argc, argv);
              return RUN_ALL_TESTS();
          }
          ' > test_workspace/test.cpp

      - name: Run Bazel Test
        working-directory: test_workspace
        run: |
          bazel run //:test_gtsam --test_output=errors
